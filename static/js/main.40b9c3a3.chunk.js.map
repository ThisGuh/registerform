{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","username","email","pass","accept","message","errors","messages","usernameIncorrect","emailIncorrect","passwordIncorrect","acceptIncorrect","handleChange","event","value","target","name","type","setState","checked","handleSubmit","preventDefault","validation","formValidation","correct","password","length","indexOf","this","setTimeout","className","onSubmit","noValidate","htmlFor","id","onChange","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40b9c3a3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    username: \"\",\n    email: \"\",\n    pass: \"\",\n    accept: false,\n    message: \"\",\n    errors: {\n      username: false,\n      email: false,\n      pass: false,\n      accept: false\n    }\n  }\n  messages = {\n    usernameIncorrect: \"Username must be longer than 10 chars (without space)\",\n    emailIncorrect: \"Email must have @\",\n    passwordIncorrect: \"Password must be longer than 7 chars\",\n    acceptIncorrect: \"Accept Terms of Services\",\n\n  }\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    const type = event.target.type;\n    if (type === \"text\" || type === \"email\" || type === \"password\") {\n      this.setState({\n        [name]: value\n      })\n    }\n    else if (type === \"checkbox\") {\n      const checked = event.target.checked;\n      this.setState({\n        [name]: checked\n      })\n    }\n  }\n  handleSubmit = (event) => {\n    event.preventDefault()\n    const validation = this.formValidation();\n    if (validation.correct) {\n      this.setState({\n        username: \"\",\n        email: \"\",\n        pass: \"\",\n        accept: false,\n        message: \"You're registered!\",\n        errors: {\n          username: false,\n          email: false,\n          pass: false,\n          accept: false,\n\n        }\n      })\n    }\n    else {\n      this.setState({\n        errors: {\n          username: !validation.username,\n          email: !validation.email,\n          pass: !validation.password,\n          accept: !validation.accept\n        }\n      })\n    }\n  }\n  formValidation = () => {\n    let username = false;\n    let email = false;\n    let password = false;\n    let accept = false;\n    let correct = false;\n    if (this.state.username.length > 10 && this.state.username.indexOf(\" \") === -1) {\n      username = true;\n    }\n    if (this.state.email.indexOf(\"@\") !== -1) {\n      email = true;\n    }\n    if (this.state.pass.length > 8) {\n      password = true;\n    }\n    if (this.state.accept) {\n      accept = true;\n    }\n    if (username && email && password && accept) {\n      correct = true;\n    }\n    return ({\n      correct,\n      username,\n      email,\n      password,\n      accept\n    })\n  }\n  componentDidUpdate() {\n    if (this.state.message !== \"\") {\n      setTimeout(() => {\n        this.setState({\n          message: \"\"\n        })\n      }, 2000)\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit} noValidate>\n          <label htmlFor=\"user\">\n            <input type=\"text\" id=\"user\" name=\"username\" value={this.state.username} onChange={this.handleChange} placeholder=\"Name\" className=\"textInput\" />\n            {this.state.errors.username && <span>{this.messages.usernameIncorrect}</span>}\n          </label>\n\n          <label htmlFor=\"email\">\n            <input type=\"email\" id=\"email\" name=\"email\" className=\"textInput\" value={this.state.email} placeholder=\"Email\" onChange={this.handleChange} />\n            {this.state.errors.email && <span>{this.messages.emailIncorrect}</span>}\n          </label>\n\n          <label htmlFor=\"password\">\n            <input type=\"password\" id=\"password\" name=\"pass\" className=\"textInput\" value={this.state.pass} placeholder=\"Password\" onChange={this.handleChange} />\n            {this.state.errors.pass && <span>{this.messages.passwordIncorrect}</span>}\n          </label>\n          <input type=\"checkbox\" id=\"accept\" name=\"accept\" value={this.state.accept} onChange={this.handleChange} checked={this.state.accept} />\n          <label htmlFor=\"accept\" className=\"acceptCheckbox\">Accept Terms of Service</label>\n          <button>Sign Up</button>\n          {this.state.message && <h3>{this.state.message}</h3>}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}